In this blog post, I attempt to explore the use of recurrent neural networks (RNNS) in predicting 
what items *Invoker* players will purchase in standard *DotA 2* matches. 
*DotA 2* is a game managed by Valve (and lead developed by IceFrog, hallowed be his name) with team-based,
player versus player, and role-playing elements. As with most role-role playing games, there exists a diegetic component 
of a character build where a player must choose how the character he or she plays is developed. One of these elements of construction
includes what items a player with purchase with in-game rewards in order to strengthen their character, and I attempt to predict 
this particular element with RNNs. The problem was limited to one of the characters of *DotA 2* in higher level matches.
This blog post will not focus on particularly difficult techniques, this neural network is actually just a simple LSTM cell, and the code
runs on most computers within the past 5 years. 

All of the code referenced in this post---including data gathering, pre-processing, and modelling---are 
included in [this project](https://github.com/beelzebud/Dota-ItemSequence). The frameworks used include NumPy, SciPy and TensorFlow. 
Special thanks goes out to the (Straz team)[https://stratz.com] for their assistance in obtaining data using their API.

Recurrent neural networks are particularly useful in supervised learning environemnts where sequence and order matters such as natural
language processing, audio and visual encodings, and stateful changes. *DotA 2* is a game with a lot of state, and I only use a limited
number of features of this state, but the results seem initially promising, so RNNs seem like a worthwile approach. 
For this particular project, the network consists of a simple long short term memory cell. 

The data was obtained by using the [Stratz API](https://docs.stratz.com) with the initial set of matches coming
from Ken of Stratz.


One thing I could have done is done some processing on the sequences. 
For example, you cannot buy a Null Talisman, but
you instead buy a circlet, mantle, and recipe in some order. Better grouping of items and mapping such as some
combination of the Null talisman components into an indication of buying a Null Talisman could extra more
meaningful signal. After all, it doesn't matter what order you buy components of an item. However, I did not want
to deal with situations with when people opt to not finish an item immediately. I could have also removed
Null Talisman or any item that isn't a purchaseable item and limited the number of targets.


I also forgot to take out from the sequences items that were context-dependent for buying, 
such as teleport scrolls or salves.
